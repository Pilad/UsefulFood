package usefulfood.items;

import java.util.Random;

import net.minecraft.block.material.Material;
import net.minecraft.entity.EntityLiving;
import net.minecraft.entity.item.EntityItem;
import net.minecraft.item.EnumToolMaterial;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.world.World;
import usefulfood.UsefulFoodConfig;
import usefulfood.UsefulFoodItems;
import usefulfood.mod_usefulfood;
import cpw.mods.fml.common.FMLLog;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;

public class ItemFruitPicker extends Item {

	protected EnumToolMaterial theToolMaterial;

	public ItemFruitPicker(int id, EnumToolMaterial material) {
		super(id);
		this.setCreativeTab(mod_usefulfood.tabUsefulFood);
		this.theToolMaterial = material;
        this.maxStackSize = 1;
        this.setMaxDamage(material.getMaxUses());
	}
	
	@Override
	public boolean onBlockDestroyed(ItemStack itemstack, World world, int unknown, int x, int y, int z, EntityLiving player)
    {
		System.out.println("coords is: " + x + " " + y + " " + z);
		
        if (world.getBlockMaterial(x, y, z) != Material.leaves)
        {
            return super.onBlockDestroyed(itemstack, world, unknown, x, y, z, player);
        }
        else
        {
        	int blockid = world.getBlockId(x, y, z);
        	int blockmetadata = world.getBlockMetadata(x, y, z);
        	
        	if (world.isRemote)
            {
                return true;
            }
            else
            {
            	DropFruit(player, blockmetadata, x, y, z);
            	world.setBlock(x, y, z, 0);
                itemstack.damageItem(1, player);
                return true;
            }
        }
    }
	
	@Override
	@SideOnly(Side.CLIENT)
	
    public boolean isFull3D()
    {
        return true;
    }

    public String func_77842_f()
    {
        return this.theToolMaterial.toString();
    }
    
    public void DropFruit(EntityLiving player, int metadata, int x, int y, int z) 
	{
    	String[][] myStringArray = new String [][] 
    	{ 
    			{ "X0", "Y0"},
                { "X1", "Y1"},
                { "X2", "Y2"},
                { "X3", "Y3"},
                { "X4", "Y4"} 
        };
    	
		Random random = new Random();
		int lootchance = random.nextInt(101);
		
		FMLLog.info(String.valueOf(lootchance));
		if(lootchance <= UsefulFoodConfig.FruitDropRateLeaves) 
		{
			int fruit = random.nextInt(3);
			int fruitItemID;
			switch (metadata) 
			{
			   case 0: 
			   {
				   fruit = random.nextInt(3);
				   switch (fruit) 
				   {
				   		case 0: fruitItemID = Item.appleRed.itemID; break;
				   		case 1: fruitItemID = UsefulFoodItems.Peach.itemID; break;
				   		case 2: fruitItemID = UsefulFoodItems.Orange.itemID; break;
				   }
			   }
			   case 1: 
			   {
				   fruitItemID = UsefulFoodItems.Orange.itemID; break;
			   }
			   case 2: 
			   {
				  fruitItemID = UsefulFoodItems.Peach.itemID; break;
			   }
			   case 3: 
			   {
				   fruitItemID = UsefulFoodItems.Pear.itemID; break;
			   }
			   
			   default: fruitItemID = Item.appleRed.itemID; break;
			}
			
			EntityItem entityitem = new EntityItem(player.worldObj, x, y, z, new ItemStack(fruitItemID, 1, 1));
            entityitem.delayBeforeCanPickup = 10;
            player.worldObj.spawnEntityInWorld(entityitem);
		}
	}
}
